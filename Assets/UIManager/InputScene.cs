//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/UIManager/InputScene.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputScene: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputScene()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputScene"",
    ""maps"": [
        {
            ""name"": ""SelectScene"",
            ""id"": ""3b542b28-149d-4c03-81d9-81d1d62a9a5a"",
            ""actions"": [
                {
                    ""name"": ""ChangeCameraScene"",
                    ""type"": ""Button"",
                    ""id"": ""788a1b1e-11a5-47e3-b3a6-0e3a25fb96d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeFilterScene"",
                    ""type"": ""Button"",
                    ""id"": ""19af6d59-6a95-43a2-85c1-76aab7d4650d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectObject"",
                    ""type"": ""Button"",
                    ""id"": ""b3808322-c0a3-4bc2-a8d1-0bd0521501c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62d729d6-9050-4c51-8b71-d3257f200b07"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCameraScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7e8f153-7ef6-461d-b55b-2c038537afb2"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeFilterScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e87adb06-4719-4f90-a85b-b75d03df5ea0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SelectScene
        m_SelectScene = asset.FindActionMap("SelectScene", throwIfNotFound: true);
        m_SelectScene_ChangeCameraScene = m_SelectScene.FindAction("ChangeCameraScene", throwIfNotFound: true);
        m_SelectScene_ChangeFilterScene = m_SelectScene.FindAction("ChangeFilterScene", throwIfNotFound: true);
        m_SelectScene_SelectObject = m_SelectScene.FindAction("SelectObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SelectScene
    private readonly InputActionMap m_SelectScene;
    private List<ISelectSceneActions> m_SelectSceneActionsCallbackInterfaces = new List<ISelectSceneActions>();
    private readonly InputAction m_SelectScene_ChangeCameraScene;
    private readonly InputAction m_SelectScene_ChangeFilterScene;
    private readonly InputAction m_SelectScene_SelectObject;
    public struct SelectSceneActions
    {
        private @InputScene m_Wrapper;
        public SelectSceneActions(@InputScene wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeCameraScene => m_Wrapper.m_SelectScene_ChangeCameraScene;
        public InputAction @ChangeFilterScene => m_Wrapper.m_SelectScene_ChangeFilterScene;
        public InputAction @SelectObject => m_Wrapper.m_SelectScene_SelectObject;
        public InputActionMap Get() { return m_Wrapper.m_SelectScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectSceneActions set) { return set.Get(); }
        public void AddCallbacks(ISelectSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectSceneActionsCallbackInterfaces.Add(instance);
            @ChangeCameraScene.started += instance.OnChangeCameraScene;
            @ChangeCameraScene.performed += instance.OnChangeCameraScene;
            @ChangeCameraScene.canceled += instance.OnChangeCameraScene;
            @ChangeFilterScene.started += instance.OnChangeFilterScene;
            @ChangeFilterScene.performed += instance.OnChangeFilterScene;
            @ChangeFilterScene.canceled += instance.OnChangeFilterScene;
            @SelectObject.started += instance.OnSelectObject;
            @SelectObject.performed += instance.OnSelectObject;
            @SelectObject.canceled += instance.OnSelectObject;
        }

        private void UnregisterCallbacks(ISelectSceneActions instance)
        {
            @ChangeCameraScene.started -= instance.OnChangeCameraScene;
            @ChangeCameraScene.performed -= instance.OnChangeCameraScene;
            @ChangeCameraScene.canceled -= instance.OnChangeCameraScene;
            @ChangeFilterScene.started -= instance.OnChangeFilterScene;
            @ChangeFilterScene.performed -= instance.OnChangeFilterScene;
            @ChangeFilterScene.canceled -= instance.OnChangeFilterScene;
            @SelectObject.started -= instance.OnSelectObject;
            @SelectObject.performed -= instance.OnSelectObject;
            @SelectObject.canceled -= instance.OnSelectObject;
        }

        public void RemoveCallbacks(ISelectSceneActions instance)
        {
            if (m_Wrapper.m_SelectSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectSceneActions @SelectScene => new SelectSceneActions(this);
    public interface ISelectSceneActions
    {
        void OnChangeCameraScene(InputAction.CallbackContext context);
        void OnChangeFilterScene(InputAction.CallbackContext context);
        void OnSelectObject(InputAction.CallbackContext context);
    }
}
